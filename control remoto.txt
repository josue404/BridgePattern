// La "abstracción" define la interfaz para el "control"
// parte de las dos jerarquías de clases. Mantiene una referencia
// a un objeto de la jerarquía de "implementación" y delegados
// todo el trabajo real de este objeto.
class RemoteControl is
    protected field device: Device
    constructor RemoteControl(device: Device) is
        this.device = device
    method togglePower() is
        if (device.isEnabled()) then
            device.disable()
        else
            device.enable()
    method volumeDown() is
        device.setVolume(device.getVolume() - 10)
    method volumeUp() is
        device.setVolume(device.getVolume() + 10)
    method channelDown() is
        device.setChannel(device.getChannel() - 1)
    method channelUp() is
        device.setChannel(device.getChannel() + 1)


// Puedes extender clases desde la jerarquía de abstracción
// independientemente de las clases de dispositivos.
class AdvancedRemoteControl extends RemoteControl is
    method mute() is
        device.setVolume(0)


// La interfaz de "implementación" declara métodos comunes a todos
// clases de implementación concretas. No tiene que coincidir con el
// interfaz de abstracción. De hecho, las dos interfaces pueden ser
// completamente diferente. Por lo general, la interfaz de implementación
// proporciona solo operaciones primitivas, mientras que la abstracción
// define operaciones de nivel superior basadas en esas primitivas.

interface Device is
    method isEnabled()
    method enable()
    method disable()
    method getVolume()
    method setVolume(percent)
    method getChannel()
    method setChannel(channel)


// Todos los dispositivos siguen la misma interfaz
class Tv implements Device is
    // ...

class Radio implements Device is
    // ...


// codigo cliente
tv = new Tv()
remote = new RemoteControl(tv)
remote.togglePower()

radio = new Radio()
remote = new AdvancedRemoteControl(radio)